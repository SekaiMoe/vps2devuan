#!/bin/sh

# Copyright 2024, dabao1955 <dabao1955@163.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -e

[ "$(id -u)" -ne 0 ] && echo "This script must be run as root" && exit 1


download_and_extract_bootstrap() {

	mkdir devuan
	git clone https://git.devuan.org/devuan/debootstrap
	make -C debootstrap install
	debootstrap --arch=$(arch) --variant=minbase $version devuan $mirror
	make -C debootstrap uninstall
	rm -rf debootstrap

	if grep -E "^nameserver\s+127\." /etc/resolv.conf > /dev/null; then
		echo "nameserver 8.8.8.8" > /devuan/etc/resolv.conf
	else
		cp -Lp /etc/resolv.conf /devuan/etc
	fi

	mount -t proc /proc /devuan/proc
	mount --make-rslave --rbind /sys /devuan/sys
	mount --make-rslave --rbind /dev /devuan/dev
	mount --make-rslave --rbind /run /devuan/run
	mount --bind / /devuan/mnt
	ld=$(find /devuan/lib/ /devuan/lib64/ -name "ld-linux*.so*" -print -quit)
}

save_root_pass() {
	grep "^root:" /etc/shadow > /devuan/root.passwd
	chmod 0600 /devuan/root.passwd
}

backup_old_files() {
	cp -Lp /etc/fstab /devuan/etc
	if [ -d /etc/ssh ]; then
		mkdir /devuan/ssh
		cp -Lp /etc/ssh/ssh_host* /devuan/ssh
	fi
	if [ -d /root/.ssh ]; then
		cp -Lpr /root/.ssh /devuan/key
	fi
}

delete_all() {
	# Delete *all* files from /
	find / \( ! -path '/dev/*' -and ! -path '/proc/*' -and ! -path '/sys/*' -and ! -path '/selinux/*' -and ! -path '/devuan/*' -and ! -name '/swapfile' \) -delete 2>/dev/null || true
}

chroot_exec() {
	$ld --library-path /devuan/lib64 \
	    /devuan/usr/bin/chroot /devuan /bin/bash -c "$*"
}

install_packages() {
	packages="ca-certificates openssh-server openssh-client linux-headers-generic linux-image-generic"
	chroot_exec "apt-get install debootstrap -y"
	chroot_exec "debootstrap --arch=$(arch) --variant=minbase $version /mnt $mirror"
	/usr/sbin/update-ca-certificates
	apt-get install -y $packages
	unset packages
}

restore_root_pass() {
	# If the root password is not set, use vps2devuan
	if grep -E -q '^root:.?:' /devuan/root.passwd; then
		echo "root:vps2devuan" | chpasswd
	else
		sed -i '/^root:/d' /etc/shadow
		cat /devuan/root.passwd >> /etc/shadow
	fi
}

cleanup() {
	mv /devuan/etc/fstab /etc/fstab
	if [ -d /devuan/ssh ]; then
		chmod -R 0600 /devuan/ssh
		mv /devuan/ssh/* /etc/ssh
	fi
	if [ -d /devuan/key ]; then
		mv /devuan/key /root/.ssh
	fi
	awk '/\/devuan/ {print $2}' /proc/mounts | sort -r | xargs umount -nl || true
	rm -rf /devuan
}

configure_bootloader() {
	grep -q '^[[:space:]]*eth' /proc/net/dev && sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="/&net.ifnames=0 /' /etc/default/grub

	systemd-machine-id-setup && dracut -f --regenerate-all
	if [ -d /sys/firmware/efi ]; then
		efi_directory=$(df --type=vfat | tail -n1 | awk '{print $6}')
		/usr/sbin/grub2-install --recheck --removable --efi-directory="$efi_directory"
		cat > /etc/sysconfig/bootloader <<-EOF
			LOADER_TYPE="grub2-efi"
		EOF
	else
		root_dev=$(findmnt -no SOURCE /)
		root_dev=$(lsblk -npsro TYPE,NAME "$root_dev" | awk '$1 == "disk" {print $2}' | head -1)
		/usr/sbin/grub2-install --recheck --force "$root_dev"
		cat > /etc/sysconfig/bootloader <<-EOF
			LOADER_TYPE="grub2"
		EOF
	fi
	/sbin/update-bootloader
	unset efi_directory root_dev
}

configure_network() {
	for dev in $(ip -br l | awk '$2 == "UP" {split($1, r, "@"); print r[1]}'); do
		ip="$(ip -br a s "$dev" scope global | awk '{for(i=3;i<=NF;i++) printf "IPADDR%d=%s\n", i-3, $i}')"
		routes="$(ip -4 r s default; ip -6 r s default)"
		gateway="$(echo "$routes" | awk -v dev="$dev" '$5 == dev {printf "default %s\n", $3}')"

		cat > "/etc/sysconfig/network/ifcfg-$dev" <<-EOF
			STARTMODE=auto
			$ip
		EOF
		cat > "/etc/sysconfig/network/ifroute-$dev" <<-EOF
			$gateway
		EOF
	done
	unset dev ip routes gateway
}

finalize() {
	if [ -d "sshd_config.d" ]; then
		cat > "/etc/ssh/sshd_config.d/PermitRootLogin.conf" <<-EOF
			PermitRootLogin yes
		EOF
	elif [ "$(grep -w "^PermitRootLogin yes" /etc/ssh/sshd_config)" = "" ]; then
		mkdir -p /etc/ssh/sshd_config.d
		cat > "/etc/ssh/sshd_config.d/PermitRootLogin.conf" <<-EOF
			PermitRootLogin yes
		EOF
	fi
	/etc/init.d/sshd start

	cat <<-EOF
		Hi,
		your VM has successfully been reimaged with devuan.

		When you are finished with your post-installation, you'll need to reboot the VM the rough way:
		# sync ; reboot -f

		Then you'll be able to connect to your VM using SSH and to login using your old root password (or "vps2suse" if you didn't have a root password).
	EOF
}

cpu_type=$(uname -m)
version=ceres
mirror=
container=container
ld=

while getopts "s:c:m:h:" opt; do
	case $opt in
	s)
		version="$OPTARG"
		case $version in
		*beowulf|*chimaera|*daedalus)
			echo "Unsuppored version."
			exit 1
			;;
		*stable*)
			# Fixes URI for the leap distribution.
			container="containers" ;;
		esac
		;;
	c)
		container="$OPTARG"
		;;
	m)
		mirror="$OPTARG"
		;;
	h)
		cat <<-EOF
			usage: ${0##*/} [options]

			  Options:
				-h                           Show help messages.
				-s system version            Set OS version (Default: Tumbleweed).
				-c container                 Set architecture type for the container image (Default: auto detect).
				-m mirror                    Set mirror address (Default: http://deb.devuan.org)..
		EOF
		exit 0
		;;
	:)
		printf "%s: option requires an argument -- '%s'\n" "${0##*/}" "$OPTARG" >&2
		exit 1
		;;
	?)
		printf "%s: invalid option -- '%s'\n" "${0##*/}" "$OPTARG" >&2
		exit 1
		;;
	esac
done

cd /
download_and_extract_bootstrap
save_root_pass
backup_old_files
delete_all
configure_chroot
install_packages
restore_root_pass
cleanup
configure_bootloader
configure_network
finalize
